{% extends 'base.html.twig' %}

{% block title %}Mes Tâches{% endblock %}

{% block body %}
<div class="max-w-7xl mx-auto space-y-8">
    <!-- Header Section -->
    <div class="text-center">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Mes Tâches</h1>
        <p class="text-lg text-gray-600 mb-8">Organisez et suivez vos tâches quotidiennes</p>
        
        {% if tasks|length > 0 %}
            <!-- Task Statistics -->
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-6 max-w-md mx-auto mb-8">
                {% set completedCount = tasks|filter(task => task.isDone)|length %}
                {% set totalCount = tasks|length %}
                {% set pendingCount = totalCount - completedCount %}
                
                <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                    <div class="text-3xl font-bold text-primary-600 mb-2">{{ totalCount }}</div>
                    <div class="text-sm font-medium text-gray-600">Total</div>
                </div>
                <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                    <div class="text-3xl font-bold text-warning-600 mb-2">{{ pendingCount }}</div>
                    <div class="text-sm font-medium text-gray-600">En cours</div>
                </div>
                <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
                    <div class="text-3xl font-bold text-success-600 mb-2">{{ completedCount }}</div>
                    <div class="text-sm font-medium text-gray-600">Terminées</div>
                </div>
            </div>
        {% endif %}
        
        <!-- Add New Task Button -->
        {% embed 'components/button.html.twig' with {'href': path('app_task_new'), 'icon': 'plus', 'size': 'lg', 'class': 'mb-8'} %}
            {% block content %}Créer une nouvelle tâche{% endblock %}
        {% endembed %}
    </div>

    <!-- Tasks Grid -->
    {% if tasks|length > 0 %}
        <div class="space-y-6">
            <!-- Filter Buttons -->
            <div class="flex flex-wrap justify-center gap-3">
                <button onclick="filterTasks('all')" class="filter-btn active" data-filter="all">
                    Toutes ({{ tasks|length }})
                </button>
                <button onclick="filterTasks('pending')" class="filter-btn" data-filter="pending">
                    En cours ({{ tasks|filter(task => not task.isDone)|length }})
                </button>
                <button onclick="filterTasks('completed')" class="filter-btn" data-filter="completed">
                    Terminées ({{ tasks|filter(task => task.isDone)|length }})
                </button>
            </div>
            
            <!-- Task Cards Grid -->
            <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4" id="tasks-container">
                {% for task in tasks %}
                    {% set isOverdue = task.dueDate and task.dueDate < date() and not task.isDone %}
                    
                    <div class="task-item {{ task.isDone ? 'task-completed' : 'task-pending' }}" data-task-id="{{ task.id }}">
                        {% embed 'components/card.html.twig' with {'hover': true, 'class': 'h-full transform transition-all duration-200 hover:scale-105 ' ~ (isOverdue ? 'border-l-4 border-l-error-500 bg-error-50' : '')} %}
                            {% block content %}
                                <div class="space-y-4">
                                    <!-- Task Header -->
                                    <div class="flex items-start justify-between">
                                        <div class="flex-1">
                                            <div class="flex items-center gap-3 mb-3">
                                                <!-- Status Toggle -->
                                                <form method="post" action="{{ path('app_task_toggle', {'id': task.id}) }}" class="inline">
                                                    <input type="hidden" name="_token" value="{{ csrf_token('toggle' ~ task.id) }}">
                                                    <button type="submit" class="text-2xl hover:scale-110 transition-transform duration-200">
                                                        {% if task.isDone %}
                                                            <span class="text-success-600">✅</span>
                                                        {% else %}
                                                            <span class="text-gray-300 hover:text-success-500">⭕</span>
                                                        {% endif %}
                                                    </button>
                                                </form>
                                                
                                                <!-- Task Title -->
                                                <h3 class="font-bold text-lg text-gray-900 {{ task.isDone ? 'line-through text-gray-500' : '' }} leading-tight">
                                                    {{ task.title }}
                                                </h3>
                                            </div>
                                            
                                            <!-- Task Description -->
                                            {% if task.description %}
                                                <p class="text-gray-600 text-sm leading-relaxed {{ task.isDone ? 'line-through text-gray-400' : '' }} mb-4">
                                                    {{ task.description|length > 120 ? task.description|slice(0, 120) ~ '...' : task.description }}
                                                </p>
                                            {% endif %}
                                        </div>
                                    </div>
                                    
                                    <!-- Task Meta Information -->
                                    <div class="flex items-center justify-between text-sm pt-4 border-t border-gray-100">
                                        <div class="flex items-center gap-2 text-gray-500">
                                            {% if task.dueDate %}
                                                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                                                </svg>
                                                <span class="{{ isOverdue ? 'text-error-600 font-semibold' : '' }}">
                                                    {{ task.dueDate|date('d/m/Y') }}
                                                </span>
                                            {% else %}
                                                <span class="text-gray-400 italic">Pas d'échéance</span>
                                            {% endif %}
                                        </div>
                                        
                                        <!-- Status Badge -->
                                        {% if task.isDone %}
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-success-100 text-success-800">
                                                ✓ Terminée
                                            </span>
                                        {% elseif isOverdue %}
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-error-100 text-error-800">
                                                ⚠ En retard
                                            </span>
                                        {% else %}
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-warning-100 text-warning-800">
                                                ⏳ En cours
                                            </span>
                                        {% endif %}
                                    </div>
                                    
                                    <!-- Action Buttons -->
                                    <div class="flex justify-end space-x-2 pt-3">
                                        {% embed 'components/button.html.twig' with {'href': path('app_task_edit', {'id': task.id}), 'type': 'secondary', 'size': 'sm', 'icon': 'edit'} %}
                                            {% block content %}Modifier{% endblock %}
                                        {% endembed %}
                                        
                                        {% embed 'components/button.html.twig' with {'type': 'danger', 'size': 'sm', 'onclick': 'openDeleteModal(' ~ task.id ~ ')', 'icon': 'trash'} %}
                                            {% block content %}{% endblock %}
                                        {% endembed %}
                                    </div>
                                </div>
                            {% endblock %}
                        {% endembed %}
                    </div>
                {% endfor %}
            </div>
        </div>
    {% else %}
        <!-- Empty State -->
        <div class="text-center py-20">
            <div class="mx-auto h-32 w-32 bg-gray-100 rounded-full flex items-center justify-center mb-8">
                <svg class="h-16 w-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
                </svg>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 mb-4">Aucune tâche pour le moment</h3>
            <p class="text-gray-600 mb-8 text-lg max-w-md mx-auto">
                Commencez par créer votre première tâche pour mieux organiser votre quotidien.
            </p>
            
            {% embed 'components/button.html.twig' with {'href': path('app_task_new'), 'icon': 'plus', 'size': 'lg'} %}
                {% block content %}Créer ma première tâche{% endblock %}
            {% endembed %}
        </div>
    {% endif %}
</div>

<!-- Delete Confirmation Modals -->
{% for task in tasks %}
    {% embed 'components/modal.html.twig' with {'id': 'delete-modal-' ~ task.id, 'title': 'Supprimer la tâche', 'size': 'sm'} %}
        {% block content %}
            <div class="text-center py-4">
                <div class="mx-auto w-16 h-16 bg-error-100 rounded-full flex items-center justify-center mb-4">
                    <svg class="w-8 h-8 text-error-600" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">Supprimer "{{ task.title }}" ?</h3>
                <p class="text-gray-600">Cette action ne peut pas être annulée.</p>
            </div>
        {% endblock %}
        
        {% block footer %}
            {% embed 'components/button.html.twig' with {'type': 'secondary', 'onclick': 'closeModal("delete-modal-' ~ task.id ~ '")'} %}
                {% block content %}Annuler{% endblock %}
            {% endembed %}
            
            <form method="post" action="{{ path('app_task_delete', {'id': task.id}) }}" class="inline">
                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ task.id) }}">
                {% embed 'components/button.html.twig' with {'buttonTag': 'submit', 'type': 'danger', 'icon': 'trash'} %}
                    {% block content %}Supprimer{% endblock %}
                {% endembed %}
            </form>
        {% endblock %}
    {% endembed %}
{% endfor %}

{% endblock %}

{% block javascripts %}
{{ parent() }}
<style>
    .filter-btn {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
        border: 1px solid #d1d5db;
        border-radius: 0.5rem;
        background: white;
        color: #374151;
        transition: all 0.2s ease-in-out;
        cursor: pointer;
    }
    .filter-btn:hover {
        background: #f9fafb;
    }
    .filter-btn.active {
        background: #2563eb;
        color: white;
        border-color: #2563eb;
        box-shadow: 0 2px 5px rgba(37, 99, 235, 0.3);
    }
    .task-item {
        display: block;
    }
    .animate-fade-in {
        animation: fadeIn 0.2s ease-in-out;
    }
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

<script>
function filterTasks(filter) {
    const tasks = document.querySelectorAll('.task-item');
    const buttons = document.querySelectorAll('.filter-btn');
    
    // Update active state
    buttons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.filter === filter) {
            btn.classList.add('active');
        }
    });
    
    tasks.forEach(task => {
        const isCompleted = task.classList.contains('task-completed');
        const isPending = task.classList.contains('task-pending');
        
        let shouldShow = filter === 'all' || 
                         (filter === 'completed' && isCompleted) || 
                         (filter === 'pending' && isPending);
        
        if (shouldShow) {
            task.style.display = 'block';
            task.classList.add('animate-fade-in');
        } else {
            task.classList.remove('animate-fade-in');
            setTimeout(() => task.style.display = 'none', 150);
        }
    });
}

function openDeleteModal(taskId) {
    openModal('delete-modal-' + taskId);
}
</script>
{% endblock %}
